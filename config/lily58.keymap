/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        LNG {
            bindings = <&kp LG(SPACE)>;
            key-positions = <36 49>;
            slow-release;
            require-prior-idle-ms = <0>;
        };
    };

    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <5>;
            bindings = <&kp LSHFT>, <&kp CAPSLOCK>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <5>;
            bindings = <&kp LSHFT>, <&kp LG(SPACE)>;
        };

        my_caps: my_caps {
            compatible = "zmk,behavior-caps-word";
            label = "MY_CAPS";
            #binding-cells = <0>;
            continue-list = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
        };

        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp LC(LG(Q))>;

            tapping-term-ms = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESCAPE  &kp N1  &kp N2  &kp N3     &kp N4        &kp N5                                         &kp N6  &kp N7    &kp N8         &kp N9   &kp N0    &kp BACKSPACE
&kp GRAVE   &kp Q   &kp W   &kp E      &kp R         &kp T                                          &kp Y   &kp U     &kp I          &kp O    &kp P     &kp BACKSLASH
&kp TAB     &kp A   &kp S   &kp D      &kp F         &kp G                                          &kp H   &kp J     &kp K          &kp L    &kp SEMI  &kp SQT
&td0        &kp Z   &kp X   &kp C      &kp V         &kp B   &kp LEFT_BRACKET    &kp RIGHT_BRACKET  &kp N   &kp M     &kp COMMA      &kp DOT  &kp FSLH  &td1
                            &kp LCTRL  &kp LEFT_GUI  &mo 1   &kp SPACE           &kp RET            &mo 2   &kp RGUI  &kp RIGHT_ALT
            >;
        };

        numpad_layer {
            // --------------------------------------------------------------------------------------------------------------
            // | LPAD  | BRDn | BRUp |  MUT |  Vo- |  Vo+ |                   |      |       |       |      |       |       |
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !   |  @   |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |      |      |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &none      &none           &none           &none            &none                               &none           &none         &none         &none         &kp EXCLAMATION  &kp QUESTION
&trans  &kp PG_UP  &kp HOME        &kp UP_ARROW    &kp END          &kp INSERT                          &none           &kp N7        &kp N8        &kp N9        &kp KP_SUBTRACT  &kp KP_DIVIDE
&trans  &kp PG_DN  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &none                               &kp KP_EQUAL    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp KP_PLUS      &kp KP_ASTERISK
&trans  &trans     &trans          &kp CAPSLOCK    &trans           &kp DELETE  &none        &sl 1      &kp UNDERSCORE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp KP_COMMA     &trans
                                   &trans          &trans           &mo 3       &kp SPACE    &kp ENTER  &mo 3           &kp NUMBER_0  &kp KP_DOT
            >;
        };

        symbol_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans     &trans                &kp LEFT_BRACE        &kp RIGHT_BRACE        &none       &trans                                 &none        &none      &none           &none          &none            &none
&kp GRAVE  &kp TILDE             &kp LESS_THAN         &kp GREATER_THAN       &kp STAR    &kp KP_DIVIDE                          &kp EQUAL    &kp AT     &kp UNDERSCORE  &kp CARET      &kp QUESTION     &none
&trans     &kp NON_US_BACKSLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS    &kp KP_MINUS                           &kp PERCENT  &kp COLON  &kp SEMICOLON   &kp AMPERSAND  &kp EXCLAMATION  &none
&trans     &none                 &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOLLAR  &kp UNDER      &kp PIPE     &my_caps   &none        &none      &none           &none          &none            &trans
                                                       &trans                 &trans      &mo 3          &kp SPACE    &kp ENTER  &mo 3        &trans     &trans
            >;
        };

        media_layer {
            bindings = <
&kp LC(LG(Q))  &trans  &trans  &trans  &trans  &studio_unlock                    &trans  &trans             &trans            &trans           &trans  &bt BT_CLR
&trans         &trans  &trans  &trans  &trans  &trans                            &trans  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &trans  &bt BT_SEL 0
&trans         &trans  &trans  &none   &none   &trans                            &trans  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT       &trans  &bt BT_SEL 1
&trans         &trans  &trans  &trans  &trans  &trans          &trans    &trans  &trans  &kp C_BRI_DEC      &none             &kp C_BRI_INC    &trans  &bt BT_SEL 2
                               &trans  &trans  &trans          &trans    &trans  &trans  &trans             &trans
            >;
        };
    };
};
